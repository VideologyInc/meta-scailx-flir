From 5d0bf564a1e2d6d14dc09afa60474e89105f2eb8 Mon Sep 17 00:00:00 2001
From: Kobus Goosen <kgoosen@videologyinc.com>
Date: Wed, 29 Oct 2025 15:37:13 +0100
Subject: [PATCH] csi2-sam: add formats and negotiate formats with SRC

---
 .../staging/media/imx/imx8-mipi-csi2-sam.c    | 152 +++++++++++++++---
 1 file changed, 129 insertions(+), 23 deletions(-)

diff --git a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
index 0645884ce9c5..cc01d28f6d17 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
@@ -190,6 +190,7 @@
 #define MIPI_CSIS_ISPCFG_FMT_RAW8		(0x2a << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RAW10		(0x2b << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RAW12		(0x2c << 2)
+#define MIPI_CSIS_ISPCFG_FMT_RAW14		(0x2d << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RGB888		(0x24 << 2)
 #define MIPI_CSIS_ISPCFG_FMT_RGB565		(0x22 << 2)
 /* User defined formats, x = 1...4 */
@@ -519,7 +520,47 @@ static const struct csis_pix_format mipi_csis_formats[] = {
 		.code = MEDIA_BUS_FMT_SRGGB12_1X12,
 		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
 		.data_alignment = 16,
-	},
+	}, {
+		.code = MEDIA_BUS_FMT_SBGGR14_1X14,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_SGBRG14_1X14,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_SGRBG14_1X14,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_SRGGB14_1X14,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_Y8_1X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+		.data_alignment = 8,
+	}, {
+		.code = MEDIA_BUS_FMT_Y10_1X10,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW10,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_Y12_1X12,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW12,
+		.data_alignment = 16,
+	}, {
+		.code = MEDIA_BUS_FMT_Y14_1X14,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 16,
+ 	}, {
+		.code = MEDIA_BUS_FMT_Y16_1X16,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW14,
+		.data_alignment = 32,
+  	}, {
+		.code = MEDIA_BUS_FMT_JPEG_1X8,
+		.fmt_reg = MIPI_CSIS_ISPCFG_FMT_RAW8,
+		.data_alignment = 8,
+	}
 };
 
 #define mipi_csis_write(__csis, __r, __v) writel(__v, __csis->regs + __r)
@@ -969,49 +1010,45 @@ static void disp_mix_gasket_config(struct csi_state *state)
 	case MEDIA_BUS_FMT_VYUY8_2X8:
 		fmt_val = GASKET_0_CTRL_DATA_TYPE_YUV422_8;
 		break;
+	case MEDIA_BUS_FMT_Y8_1X8:
+	case MEDIA_BUS_FMT_JPEG_1X8:
 	case MEDIA_BUS_FMT_SBGGR8_1X8:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW8;
-		break;
 	case MEDIA_BUS_FMT_SGBRG8_1X8:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW8;
-		break;
 	case MEDIA_BUS_FMT_SGRBG8_1X8:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW8;
-		break;
 	case MEDIA_BUS_FMT_SRGGB8_1X8:
 		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW8;
 		break;
-
+	case MEDIA_BUS_FMT_Y10_1X10:
 	case MEDIA_BUS_FMT_SBGGR10_1X10:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW10;
-		break;
 	case MEDIA_BUS_FMT_SGBRG10_1X10:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW10;
-		break;
 	case MEDIA_BUS_FMT_SGRBG10_1X10:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW10;
-		break;
 	case MEDIA_BUS_FMT_SRGGB10_1X10:
 		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW10;
 		break;
 	case MEDIA_BUS_FMT_SBGGR12_1X12:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW12;
-		break;
+	case MEDIA_BUS_FMT_Y12_1X12:
 	case MEDIA_BUS_FMT_SGBRG12_1X12:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW12;
-		break;
 	case MEDIA_BUS_FMT_SGRBG12_1X12:
-		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW12;
-		break;
 	case MEDIA_BUS_FMT_SRGGB12_1X12:
 		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW12;
 		break;
+	case MEDIA_BUS_FMT_Y14_1X14:
+	case MEDIA_BUS_FMT_SBGGR14_1X14:
+	case MEDIA_BUS_FMT_SGBRG14_1X14:
+	case MEDIA_BUS_FMT_SGRBG14_1X14:
+	case MEDIA_BUS_FMT_SRGGB14_1X14:
+	// case MEDIA_BUS_FMT_Y16_1X16:                                   // patch for raw14 in, raw16 out...
+		fmt_val = GASKET_0_CTRL_DATA_TYPE_RAW14;
+		break;
 	default:
 		pr_err("gasket not support format %d\n", fmt->code);
 		return;
 	}
 
+	dev_info(state->dev, "gasket format 0x%x\n", fmt_val);
 	regmap_read(gasket, DISP_MIX_GASKET_0_CTRL, &val);
+	dev_info(state->dev, "gasket before ctrl 0x%08x\n", val);
+	val &= ~GASKET_0_CTRL_DATA_TYPE_MASK;
 	if (fmt_val == GASKET_0_CTRL_DATA_TYPE_YUV422_8)
 		val |= GASKET_0_CTRL_DUAL_COMP_ENABLE;
 	val |= GASKET_0_CTRL_DATA_TYPE(fmt_val);
@@ -1187,6 +1224,7 @@ static int mipi_csis_get_fmt(struct v4l2_subdev *mipi_sd,
 {
 	struct csi_state *state = mipi_sd_to_csi_state(mipi_sd);
 	struct v4l2_mbus_framefmt *mf = &state->format;
+	struct csis_pix_format const *csis_fmt;
 	struct media_pad *source_pad;
 	struct v4l2_subdev *sen_sd;
 	int ret;
@@ -1212,6 +1250,11 @@ static int mipi_csis_get_fmt(struct v4l2_subdev *mipi_sd,
 		return ret;
 	}
 
+	csis_fmt = find_csis_format(format->format.code);
+	if (csis_fmt) {
+		state->csis_fmt = csis_fmt;
+	}
+
 	memcpy(mf, &format->format, sizeof(struct v4l2_mbus_framefmt));
 	return 0;
 }
@@ -1312,13 +1355,46 @@ static int mipi_csis_log_status(struct v4l2_subdev *mipi_sd)
 	return 0;
 }
 
+static char *fourcc_to_str(u64 fmt)
+{
+	static char code[5];
+
+	code[0] = (unsigned char)(fmt & 0xff);
+	code[1] = (unsigned char)((fmt >> 8) & 0xff);
+	code[2] = (unsigned char)((fmt >> 16) & 0xff);
+	code[3] = (unsigned char)((fmt >> 24) & 0xff);
+	code[4] = '\0';
+
+	return code;
+}
+
 static int csis_s_fmt(struct v4l2_subdev *sd, struct csi_sam_format *fmt)
 {
 	u32 code;
 	const struct csis_pix_format *csis_format;
 	struct csi_state *state = container_of(sd, struct csi_state, sd);
 
+	v4l2_dbg(2, debug, &state->sd, "%s: %s\n", __func__, fourcc_to_str(fmt->format));
+
 	switch (fmt->format) {
+	case V4L2_PIX_FMT_YUYV   :
+		code = MEDIA_BUS_FMT_YUYV8_2X8;
+		break;
+	case V4L2_PIX_FMT_YVYU   :
+		code = MEDIA_BUS_FMT_YVYU8_2X8;
+		break;
+	case V4L2_PIX_FMT_UYVY   :
+		code = MEDIA_BUS_FMT_UYVY8_2X8;
+		break;
+	case V4L2_PIX_FMT_YUV32  :
+		code = MEDIA_BUS_FMT_UYVY8_1X16;
+		break;
+	case V4L2_PIX_FMT_GREY:
+		code = MEDIA_BUS_FMT_Y8_1X8;
+		break;
+	case V4L2_PIX_FMT_Y10:
+		code = MEDIA_BUS_FMT_Y10_1X10;
+		break;
 	case V4L2_PIX_FMT_SBGGR8:
 	    code = MEDIA_BUS_FMT_SBGGR8_1X8;
 	    break;
@@ -1343,6 +1419,9 @@ static int csis_s_fmt(struct v4l2_subdev *sd, struct csi_sam_format *fmt)
 	case V4L2_PIX_FMT_SRGGB10:
 	    code = MEDIA_BUS_FMT_SRGGB10_1X10;
 	    break;
+	case V4L2_PIX_FMT_Y12:
+		code = MEDIA_BUS_FMT_Y12_1X12;
+	    break;
 	case V4L2_PIX_FMT_SBGGR12:
 	    code = MEDIA_BUS_FMT_SBGGR12_1X12;
 	    break;
@@ -1355,6 +1434,21 @@ static int csis_s_fmt(struct v4l2_subdev *sd, struct csi_sam_format *fmt)
 	case V4L2_PIX_FMT_SRGGB12:
 	    code = MEDIA_BUS_FMT_SRGGB12_1X12;
 	    break;
+	case V4L2_PIX_FMT_Y14:
+		code = MEDIA_BUS_FMT_Y14_1X14;
+		break;
+	case V4L2_PIX_FMT_SBGGR14:
+	    code = MEDIA_BUS_FMT_SBGGR14_1X14;
+	    break;
+	case V4L2_PIX_FMT_SGBRG14:
+	    code = MEDIA_BUS_FMT_SGBRG14_1X14;
+	    break;
+	case V4L2_PIX_FMT_SGRBG14:
+	    code = MEDIA_BUS_FMT_SGRBG14_1X14;
+	    break;
+	case V4L2_PIX_FMT_SRGGB14:
+	    code = MEDIA_BUS_FMT_SRGGB14_1X14;
+	    break;
 	default:
 		return -EINVAL;
 	}
@@ -1886,7 +1980,8 @@ static void mipi_csis_imx8mp_phy_reset(struct csi_state *state)
 		if ((code.code == MEDIA_BUS_FMT_SRGGB8_1X8) ||
 				(code.code == MEDIA_BUS_FMT_SGRBG8_1X8) ||
 				(code.code == MEDIA_BUS_FMT_SGBRG8_1X8) ||
-				(code.code == MEDIA_BUS_FMT_SBGGR8_1X8)) {
+				(code.code == MEDIA_BUS_FMT_SBGGR8_1X8) ||
+				(code.code == MEDIA_BUS_FMT_Y8_1X8)) {
 			mipi_csis_imx8mp_dewarp_ctl_data_type(state,
 					 ISP_DEWARP_CTRL_DATA_TYPE_RAW8);
 			v4l2_dbg(1, debug, &state->sd,
@@ -1894,16 +1989,27 @@ static void mipi_csis_imx8mp_phy_reset(struct csi_state *state)
 		} else if ((code.code == MEDIA_BUS_FMT_SRGGB10_1X10) ||
 				(code.code == MEDIA_BUS_FMT_SGRBG10_1X10) ||
 				(code.code == MEDIA_BUS_FMT_SGBRG10_1X10) ||
-				(code.code == MEDIA_BUS_FMT_SBGGR10_1X10)) {
+				(code.code == MEDIA_BUS_FMT_SBGGR10_1X10) ||
+				(code.code == MEDIA_BUS_FMT_Y10_1X10)) {
 			mipi_csis_imx8mp_dewarp_ctl_data_type(state,
 					ISP_DEWARP_CTRL_DATA_TYPE_RAW10);
 			v4l2_dbg(1, debug, &state->sd,
 					"%s: bus fmt is 10 bit !\n", __func__);
-		} else {
+		} else if ((code.code == MEDIA_BUS_FMT_SRGGB12_1X12) ||
+				(code.code == MEDIA_BUS_FMT_SGRBG12_1X12) ||
+				(code.code == MEDIA_BUS_FMT_SGBRG12_1X12) ||
+				(code.code == MEDIA_BUS_FMT_SBGGR12_1X12) ||
+				(code.code == MEDIA_BUS_FMT_Y12_1X12)) {
 			mipi_csis_imx8mp_dewarp_ctl_data_type(state,
 					ISP_DEWARP_CTRL_DATA_TYPE_RAW12);
 			v4l2_dbg(1, debug, &state->sd,
 					"%s: bus fmt is 12 bit !\n", __func__);
+		} else {
+			mipi_csis_imx8mp_dewarp_ctl_data_type(state,
+					ISP_DEWARP_CTRL_DATA_TYPE_RAW14);
+			v4l2_dbg(1, debug, &state->sd,
+					"%s: bus fmt is 14 bit !\n", __func__);
+
 		}
 		goto write_regmap;
 	}
