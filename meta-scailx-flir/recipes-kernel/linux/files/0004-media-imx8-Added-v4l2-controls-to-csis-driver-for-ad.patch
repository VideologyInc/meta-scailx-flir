From 6e05be771c4b289e4b3a0a34bf891a88f14f75c8 Mon Sep 17 00:00:00 2001
From: Peter Martiessen <peter.martienssen@liquify-consulting.de>
Date: Sun, 15 Jun 2025 10:51:24 +0000
Subject: [PATCH 4/4] media: imx8: Added v4l2 controls to csis driver for
 advanced control

---
 .../staging/media/imx/imx8-mipi-csi2-sam.c    | 115 ++++++++++++++++++
 1 file changed, 115 insertions(+)

diff --git a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
index 0b71fcdc2c53..5e850497fd13 100644
--- a/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
+++ b/drivers/staging/media/imx/imx8-mipi-csi2-sam.c
@@ -43,6 +43,7 @@
 #include <media/v4l2-subdev.h>
 #include <media/v4l2-device.h>
 #include <media/v4l2-event.h>
+#include <media/v4l2-ctrls.h>
 
 #define CSIS_DRIVER_NAME		"mxc-mipi-csi2-sam"
 #define CSIS_SUBDEV_NAME		"mxc-mipi-csi2"
@@ -274,6 +275,13 @@
 #define ISP_DEWARP_CTRL_ID_MODE_01		0x2
 #define ISP_DEWARP_CTRL_ID_MODE_02		0x3
 
+#define ENABLE_ADVANCED_CONTROL
+#ifdef ENABLE_ADVANCED_CONTROL
+#define V4L2_CID_CSI_LANES			(V4L2_CID_LASTP1 + 10)
+#define V4L2_CID_CSI_HS_SETTLE			(V4L2_CID_LASTP1 + 11)
+#define V4L2_CID_CSI_CLK_SETTLE			(V4L2_CID_LASTP1 + 12)
+#endif
+
 struct csi_state;
 struct mipi_csis_event {
 	u32 mask;
@@ -445,6 +453,10 @@ struct csi_state {
 	struct mipi_csis_pdata const *pdata;
 	bool hdr;
 	u32 val;
+
+#ifdef ENABLE_ADVANCED_CONTROL
+	struct v4l2_ctrl_handler ctrl_handler;
+#endif
 };
 
 static int debug;
@@ -1493,6 +1505,8 @@ static long csis_priv_ioctl(struct v4l2_subdev *sd, unsigned int cmd, void *arg_
 	case VIDIOC_QUERYCAP:
 		ret = csis_ioc_qcap(sd, arg);
 		break;
+	case VIDIOC_CROPCAP:
+		break;
 	default:
 		v4l2_err(&state->sd, "unsupported csi-sam command %d.", cmd);
 		ret = -EINVAL;
@@ -1531,6 +1545,46 @@ static struct v4l2_subdev_ops mipi_csis_subdev_ops = {
 	.pad = &mipi_csis_pad_ops,
 };
 
+#ifdef ENABLE_ADVANCED_CONTROL
+static const s64 mipi_csis_csi_lanes_menu[] = {
+	1, 2, 4
+};
+
+int mipi_csis_s_ctrl(struct v4l2_ctrl *ctrl)
+{
+	struct csi_state *state = container_of(ctrl->handler, struct csi_state, ctrl_handler);
+	struct device *dev = state->dev;
+
+	switch (ctrl->id) {
+	case V4L2_CID_CSI_LANES:
+		state->num_lanes = mipi_csis_csi_lanes_menu[ctrl->val];
+		dev_info(dev, "set lanes: %d\n", state->num_lanes);
+		break;
+
+	case V4L2_CID_CSI_HS_SETTLE:
+		state->hs_settle = ctrl->val;
+		dev_info(dev, "set hs_settle: %d\n", (u32)state->hs_settle);
+		break;
+
+	case V4L2_CID_CSI_CLK_SETTLE:
+		state->clk_settle = ctrl->val;
+		dev_info(dev, "set clk_settle: %d\n", (u32)state->clk_settle);
+		break;
+
+	default:
+		dev_warn(dev, "Unknown control 0x%08x\n", ctrl->id);
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static const struct v4l2_ctrl_ops mipi_csis_ctrl_ops = {
+	.s_ctrl = mipi_csis_s_ctrl,
+};
+#endif
+
+
 static irqreturn_t mipi_csis_irq_handler(int irq, void *dev_id)
 {
 	struct csi_state *state = dev_id;
@@ -1997,6 +2051,59 @@ static struct mipi_csis_pdata mipi_csis_imx8mp_pdata = {
 	.use_mix_gpr = true,
 };
 
+#ifdef ENABLE_ADVANCED_CONTROL
+static const struct v4l2_ctrl_config ctrl_csi_lanes = {
+	.ops = &mipi_csis_ctrl_ops,
+	.id = V4L2_CID_CSI_LANES,
+	.name = "CSI Lanes",
+	.type = V4L2_CTRL_TYPE_INTEGER_MENU,
+	.flags = V4L2_CTRL_FLAG_EXECUTE_ON_WRITE,
+	.max = 2,
+	.def = 2,
+	.qmenu_int = mipi_csis_csi_lanes_menu,
+};
+
+static const struct v4l2_ctrl_config ctrl_csi_hs_settle = {
+	.ops = &mipi_csis_ctrl_ops,
+	.id = V4L2_CID_CSI_HS_SETTLE,
+	.name = "CSI HS Settle",
+	.type = V4L2_CTRL_TYPE_INTEGER,
+	.flags = V4L2_CTRL_FLAG_EXECUTE_ON_WRITE,
+	.min = 0,
+	.max = 50,
+	.step = 1,
+	.def = 13,
+};
+
+static const struct v4l2_ctrl_config ctrl_csi_clk_settle = {
+	.ops = &mipi_csis_ctrl_ops,
+	.id = V4L2_CID_CSI_CLK_SETTLE,
+	.name = "CSI CLK Settle",
+	.type = V4L2_CTRL_TYPE_INTEGER,
+	.flags = V4L2_CTRL_FLAG_EXECUTE_ON_WRITE,
+	.min = 0,
+	.max = 3,
+	.step = 1,
+	.def = 2,
+};
+
+static int mipi_csis_ctrls_init(struct device *dev, struct csi_state *state) 
+{
+	int ret = v4l2_ctrl_handler_init(&state->ctrl_handler, 3);
+	if (ret) {
+			dev_err(dev, "Failed to init control handler\n");
+			return ret;
+	}
+	state->sd.ctrl_handler = &state->ctrl_handler;
+
+	v4l2_ctrl_new_custom(&state->ctrl_handler, &ctrl_csi_lanes, NULL);
+	v4l2_ctrl_new_custom(&state->ctrl_handler, &ctrl_csi_hs_settle, NULL);
+	v4l2_ctrl_new_custom(&state->ctrl_handler, &ctrl_csi_clk_settle, NULL);
+
+	return 0;
+}
+#endif
+
 static int mipi_csis_probe(struct platform_device *pdev)
 {
 	struct device *dev = &pdev->dev;
@@ -2103,6 +2210,10 @@ static int mipi_csis_probe(struct platform_device *pdev)
 		return ret;
 	}
 
+#ifdef ENABLE_ADVANCED_CONTROL
+	mipi_csis_ctrls_init(dev, state);
+#endif
+
 	state->pads[MIPI_CSIS_VC0_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
 	state->pads[MIPI_CSIS_VC1_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
 	state->pads[MIPI_CSIS_VC2_PAD_SINK].flags = MEDIA_PAD_FL_SINK;
@@ -2184,6 +2295,10 @@ static int mipi_csis_remove(struct platform_device *pdev)
 {
 	struct csi_state *state = platform_get_drvdata(pdev);
 
+#ifdef ENABLE_ADVANCED_CONTROL
+	v4l2_ctrl_handler_free(&state->ctrl_handler);
+#endif
+
 	media_entity_cleanup(&state->sd.entity);
 	pm_runtime_disable(&pdev->dev);
 
-- 
2.34.1

